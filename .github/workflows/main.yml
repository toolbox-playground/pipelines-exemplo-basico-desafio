name: Publish Docker image version

on:
  push:  # Evento que aciona o fluxo de trabalho (no caso, um push)
    paths-ignore:
      - 'README.md'  # Ignora o arquivo README.md
      - '.gitgnore'  # Ignora o arquivo .gitignore
      - 'release.yml'  # Ignora o arquivo release.yml

jobs:

  build:  # Nome do trabalho
    name: Build Node.js  # Nome do trabalho
    runs-on: ubuntu-latest  # Sistema operacional em que o trabalho será executado (no caso, Ubuntu)
    steps:  # Passos a serem executados no trabalho
      - uses: actions/checkout@v4  # Passo para fazer o checkout do repositório
      - name: Build Node.js  # Nome do passo
        uses: actions/setup-node@v4  # Passo para configurar o ambiente Node.js
        with:
          node-version: '18.x'  # Versão do Node.js a ser usada
      - name: Install dependencies  # Nome do passo
        run: cd app && npm install  # Comando para instalar as dependências do projeto

  
  test: # Nome do trabalho
    name: Test Node.js # Nome do trabalho
    runs-on: ubuntu-latest # Sistema operacional em que o trabalho será executado (no caso, Ubuntu)
    needs: build # Define que o trabalho depende do trabalho "build"
    steps: # Passos a serem executados no trabalho
      - uses: actions/checkout@v4 # Passo para fazer o checkout do repositório
      - name: Test Node.js # Nome do passo
        uses: actions/setup-node@v4 # Passo para configurar o ambiente Node.js
        with:
          node-version: '18.x' # Versão do Node.js a ser usada
      - name: Install dependencies # Nome do passo
        run: cd app && npm install # Comando para instalar as dependências do projeto
      - name: Run tests # Nome do passo
        run: cd app && npm test # Comando para executar os testes do projeto

  push_to_registry:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest  # Define o sistema operacional em que o fluxo de trabalho será executado
    needs: test  # Define que o trabalho depende do trabalho "test"
    permissions:
      packages: write
      contents: read
      id-token: write
      attestations: write
    steps:
      - name: Check out the repo  # Faz o checkout do repositório
        uses: actions/checkout@v4

      - name: Log in to Docker Hub  # Faz login no Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}  # Usa as credenciais do Docker Hub armazenadas como secretos no repositório
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker  # Extrai metadados (tags, labels) para o Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: "${{ secrets.DOCKER_NAMESPACE }}/${{ secrets.DOCKER_REPOSITORY }}"  # Define as imagens Docker a serem processadas

      - name: Build and push Docker image  # Constrói e envia a imagem Docker para o Docker Hub
        id: push
        uses: docker/build-push-action@v5
        with:
          context: .  # Define o contexto do build, neste caso, o diretório atual
          file: ./Dockerfile  # Especifica o arquivo Dockerfile a ser usado
          push: true  # Define se a imagem deve ser enviada para o Docker Hub
          tags: ${{ secrets.DOCKER_NAMESPACE }}/${{ secrets.DOCKER_REPOSITORY }}:main,${{ secrets.DOCKER_NAMESPACE }}/${{ secrets.DOCKER_REPOSITORY }}:${{ github.run_number }}  # Define as tags da imagem com base nos metadados extraídos
          labels: ${{ steps.meta.outputs.labels }}  # Define as labels da imagem com base nos metadados extraídos

      - name: Generate artifact attestation  # Gera uma atestação de artefato
        uses: actions/attest-build-provenance@v1 
        with:   
          subject-name: ${{ secrets.DOCKER_REGISTRY }}/${{ secrets.DOCKER_NAMESPACE }}/${{ secrets.DOCKER_REPOSITORY }}  # Define o nome do assunto da atestação
          subject-digest: ${{ steps.push.outputs.digest }}  # Define o digest do assunto da atestação
          push-to-registry: true  # Define se a atestação deve ser enviada para o registro      

  docker_test:
    name: Run Docker Container
    runs-on: ubuntu-latest
    needs: push_to_registry

    steps:
      
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Login to Docker Hub
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: Pull Docker Image
      run: docker pull ${{ secrets.DOCKER_NAMESPACE }}/${{ secrets.DOCKER_REPOSITORY }}:main

    - name: Run Docker Container
      run: docker run -d --name nodejs ${{ secrets.DOCKER_NAMESPACE }}/${{ secrets.DOCKER_REPOSITORY }}

    - name: Wait for Container to be ready
      run: sleep 10

    - name: Check if container is running
      run: docker ps -a

    - name: Stop and Remove Docker Container
      run: docker rm -f nodejs

  sonarcloud:
    name: SonarCloud Scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        # Disabling shallow clone is recommended for improving relevancy of reporting
        fetch-depth: 0

    - name: Set up SonarCloud
      run: |
        sed -i 's/\${SONAR_PROJECT_KEY}/'"${{ secrets.SONAR_PROJECT_KEY }}"'/g' sonar-project.properties
        sed -i 's/\${SONAR_ORG}/'"${{ secrets.SONAR_ORG }}"'/g' sonar-project.properties
        sed -i 's/\${SONAR_TOKEN}/'"${{ secrets.SONAR_TOKEN }}"'/g' sonar-project.properties
        sed -i 's/\${SONAR_PROJECT_NAME}/'"${{ secrets.SONAR_PROJECT_NAME }}"'/g' sonar-project.properties
        
    - name: SonarCloud Scan
      uses: sonarsource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  snyk:
    name: Snyk Security Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        with:
          args: --all-projects # Veiriica todas as dependências do projeto
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}